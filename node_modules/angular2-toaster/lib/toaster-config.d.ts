import { BodyOutputType } from './bodyOutputType';
import { ToastType } from './toast';
import * as ɵngcc0 from '@angular/core';
export declare const DefaultTypeClasses: {
    [key in ToastType]?: string;
};
export declare const DefaultIconClasses: {
    [key in ToastType]?: string;
};
export interface IToasterConfig {
    limit?: number | null;
    tapToDismiss?: boolean;
    showCloseButton?: boolean | {
        [key in ToastType]?: boolean;
    };
    closeHtml?: string;
    newestOnTop?: boolean;
    timeout?: number | {
        [key in ToastType]?: number;
    };
    typeClasses?: {
        [key in ToastType]?: string;
    };
    iconClasses?: {
        [key in ToastType]?: string;
    };
    bodyOutputType?: BodyOutputType;
    bodyTemplate?: string;
    defaultToastType?: ToastType;
    positionClass?: string;
    titleClass?: string;
    messageClass?: string;
    animation?: string;
    preventDuplicates?: boolean;
    mouseoverTimerStop?: boolean;
    toastContainerId?: number | null;
}
export declare class ToasterConfig implements IToasterConfig {
    limit?: number | null;
    tapToDismiss: boolean;
    showCloseButton: boolean | {
        [key in ToastType]?: boolean;
    };
    closeHtml: string;
    newestOnTop: boolean;
    timeout: number | {
        [key in ToastType]?: number;
    };
    typeClasses: {
        [key in ToastType]?: string;
    };
    iconClasses: {
        [key in ToastType]?: string;
    };
    bodyOutputType: BodyOutputType;
    bodyTemplate: string;
    defaultToastType: ToastType;
    positionClass: string;
    titleClass: string;
    messageClass: string;
    animation: string;
    preventDuplicates: boolean;
    mouseoverTimerStop: boolean;
    toastContainerId?: number | null;
    constructor(configOverrides?: IToasterConfig);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToasterConfig, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ToasterConfig>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3Rlci1jb25maWcuZC50cyIsInNvdXJjZXMiOlsidG9hc3Rlci1jb25maWcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4REEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2R5T3V0cHV0VHlwZSB9IGZyb20gJy4vYm9keU91dHB1dFR5cGUnO1xuaW1wb3J0IHsgVG9hc3RUeXBlIH0gZnJvbSAnLi90b2FzdCc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBEZWZhdWx0VHlwZUNsYXNzZXM6IHtcbiAgICBba2V5IGluIFRvYXN0VHlwZV0/OiBzdHJpbmc7XG59O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRGVmYXVsdEljb25DbGFzc2VzOiB7XG4gICAgW2tleSBpbiBUb2FzdFR5cGVdPzogc3RyaW5nO1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgSVRvYXN0ZXJDb25maWcge1xuICAgIGxpbWl0PzogbnVtYmVyIHwgbnVsbDtcbiAgICB0YXBUb0Rpc21pc3M/OiBib29sZWFuO1xuICAgIHNob3dDbG9zZUJ1dHRvbj86IGJvb2xlYW4gfCB7XG4gICAgICAgIFtrZXkgaW4gVG9hc3RUeXBlXT86IGJvb2xlYW47XG4gICAgfTtcbiAgICBjbG9zZUh0bWw/OiBzdHJpbmc7XG4gICAgbmV3ZXN0T25Ub3A/OiBib29sZWFuO1xuICAgIHRpbWVvdXQ/OiBudW1iZXIgfCB7XG4gICAgICAgIFtrZXkgaW4gVG9hc3RUeXBlXT86IG51bWJlcjtcbiAgICB9O1xuICAgIHR5cGVDbGFzc2VzPzoge1xuICAgICAgICBba2V5IGluIFRvYXN0VHlwZV0/OiBzdHJpbmc7XG4gICAgfTtcbiAgICBpY29uQ2xhc3Nlcz86IHtcbiAgICAgICAgW2tleSBpbiBUb2FzdFR5cGVdPzogc3RyaW5nO1xuICAgIH07XG4gICAgYm9keU91dHB1dFR5cGU/OiBCb2R5T3V0cHV0VHlwZTtcbiAgICBib2R5VGVtcGxhdGU/OiBzdHJpbmc7XG4gICAgZGVmYXVsdFRvYXN0VHlwZT86IFRvYXN0VHlwZTtcbiAgICBwb3NpdGlvbkNsYXNzPzogc3RyaW5nO1xuICAgIHRpdGxlQ2xhc3M/OiBzdHJpbmc7XG4gICAgbWVzc2FnZUNsYXNzPzogc3RyaW5nO1xuICAgIGFuaW1hdGlvbj86IHN0cmluZztcbiAgICBwcmV2ZW50RHVwbGljYXRlcz86IGJvb2xlYW47XG4gICAgbW91c2VvdmVyVGltZXJTdG9wPzogYm9vbGVhbjtcbiAgICB0b2FzdENvbnRhaW5lcklkPzogbnVtYmVyIHwgbnVsbDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRvYXN0ZXJDb25maWcgaW1wbGVtZW50cyBJVG9hc3RlckNvbmZpZyB7XG4gICAgbGltaXQ/OiBudW1iZXIgfCBudWxsO1xuICAgIHRhcFRvRGlzbWlzczogYm9vbGVhbjtcbiAgICBzaG93Q2xvc2VCdXR0b246IGJvb2xlYW4gfCB7XG4gICAgICAgIFtrZXkgaW4gVG9hc3RUeXBlXT86IGJvb2xlYW47XG4gICAgfTtcbiAgICBjbG9zZUh0bWw6IHN0cmluZztcbiAgICBuZXdlc3RPblRvcDogYm9vbGVhbjtcbiAgICB0aW1lb3V0OiBudW1iZXIgfCB7XG4gICAgICAgIFtrZXkgaW4gVG9hc3RUeXBlXT86IG51bWJlcjtcbiAgICB9O1xuICAgIHR5cGVDbGFzc2VzOiB7XG4gICAgICAgIFtrZXkgaW4gVG9hc3RUeXBlXT86IHN0cmluZztcbiAgICB9O1xuICAgIGljb25DbGFzc2VzOiB7XG4gICAgICAgIFtrZXkgaW4gVG9hc3RUeXBlXT86IHN0cmluZztcbiAgICB9O1xuICAgIGJvZHlPdXRwdXRUeXBlOiBCb2R5T3V0cHV0VHlwZTtcbiAgICBib2R5VGVtcGxhdGU6IHN0cmluZztcbiAgICBkZWZhdWx0VG9hc3RUeXBlOiBUb2FzdFR5cGU7XG4gICAgcG9zaXRpb25DbGFzczogc3RyaW5nO1xuICAgIHRpdGxlQ2xhc3M6IHN0cmluZztcbiAgICBtZXNzYWdlQ2xhc3M6IHN0cmluZztcbiAgICBhbmltYXRpb246IHN0cmluZztcbiAgICBwcmV2ZW50RHVwbGljYXRlczogYm9vbGVhbjtcbiAgICBtb3VzZW92ZXJUaW1lclN0b3A6IGJvb2xlYW47XG4gICAgdG9hc3RDb250YWluZXJJZD86IG51bWJlciB8IG51bGw7XG4gICAgY29uc3RydWN0b3IoY29uZmlnT3ZlcnJpZGVzPzogSVRvYXN0ZXJDb25maWcpO1xufVxuIl19
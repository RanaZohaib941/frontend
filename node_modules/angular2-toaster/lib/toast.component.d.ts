import { ViewContainerRef, EventEmitter, ComponentFactoryResolver, ChangeDetectorRef, OnInit, AfterViewInit, OnDestroy, NgZone, ElementRef, Renderer2 } from '@angular/core';
import { Toast } from './toast';
import { BodyOutputType } from './bodyOutputType';
import { ToasterConfig } from './toaster-config';
import * as ɵngcc0 from '@angular/core';
export declare class ToastComponent implements OnInit, AfterViewInit, OnDestroy {
    private componentFactoryResolver;
    private changeDetectorRef;
    private ngZone;
    private element;
    private renderer2;
    toasterconfig: ToasterConfig;
    toast: Toast;
    titleClass: string;
    messageClass: string;
    componentBody: ViewContainerRef;
    progressBarWidth: number;
    bodyOutputType: typeof BodyOutputType;
    clickEvent: EventEmitter<any>;
    removeToastEvent: EventEmitter<Toast>;
    private timeoutId?;
    private timeout;
    private progressBarIntervalId?;
    private removeToastTick;
    private removeMouseOverListener;
    constructor(componentFactoryResolver: ComponentFactoryResolver, changeDetectorRef: ChangeDetectorRef, ngZone: NgZone, element: ElementRef, renderer2: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    click(event: MouseEvent, toast: Toast): void;
    stopTimer(): void;
    restartTimer(): void;
    ngOnDestroy(): void;
    private configureTimer;
    private updateProgressBar;
    private clearTimers;
    private removeToast;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ToastComponent, "[toastComp]", never, { "toasterconfig": "toasterconfig"; "toast": "toast"; "titleClass": "titleClass"; "messageClass": "messageClass"; }, { "clickEvent": "clickEvent"; "removeToastEvent": "removeToastEvent"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRvYXN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3Q29udGFpbmVyUmVmLCBFdmVudEVtaXR0ZXIsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBOZ1pvbmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVG9hc3QgfSBmcm9tICcuL3RvYXN0JztcbmltcG9ydCB7IEJvZHlPdXRwdXRUeXBlIH0gZnJvbSAnLi9ib2R5T3V0cHV0VHlwZSc7XG5pbXBvcnQgeyBUb2FzdGVyQ29uZmlnIH0gZnJvbSAnLi90b2FzdGVyLWNvbmZpZyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUb2FzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIHJlbmRlcmVyMjtcbiAgICB0b2FzdGVyY29uZmlnOiBUb2FzdGVyQ29uZmlnO1xuICAgIHRvYXN0OiBUb2FzdDtcbiAgICB0aXRsZUNsYXNzOiBzdHJpbmc7XG4gICAgbWVzc2FnZUNsYXNzOiBzdHJpbmc7XG4gICAgY29tcG9uZW50Qm9keTogVmlld0NvbnRhaW5lclJlZjtcbiAgICBwcm9ncmVzc0JhcldpZHRoOiBudW1iZXI7XG4gICAgYm9keU91dHB1dFR5cGU6IHR5cGVvZiBCb2R5T3V0cHV0VHlwZTtcbiAgICBjbGlja0V2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZW1vdmVUb2FzdEV2ZW50OiBFdmVudEVtaXR0ZXI8VG9hc3Q+O1xuICAgIHByaXZhdGUgdGltZW91dElkPztcbiAgICBwcml2YXRlIHRpbWVvdXQ7XG4gICAgcHJpdmF0ZSBwcm9ncmVzc0JhckludGVydmFsSWQ/O1xuICAgIHByaXZhdGUgcmVtb3ZlVG9hc3RUaWNrO1xuICAgIHByaXZhdGUgcmVtb3ZlTW91c2VPdmVyTGlzdGVuZXI7XG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgbmdab25lOiBOZ1pvbmUsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyMjogUmVuZGVyZXIyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIGNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50LCB0b2FzdDogVG9hc3QpOiB2b2lkO1xuICAgIHN0b3BUaW1lcigpOiB2b2lkO1xuICAgIHJlc3RhcnRUaW1lcigpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBjb25maWd1cmVUaW1lcjtcbiAgICBwcml2YXRlIHVwZGF0ZVByb2dyZXNzQmFyO1xuICAgIHByaXZhdGUgY2xlYXJUaW1lcnM7XG4gICAgcHJpdmF0ZSByZW1vdmVUb2FzdDtcbn1cbiJdfQ==